-------------------FRONTEND-----------------

Folder Structure

/src
  â”œâ”€â”€ components
  â”‚   â”œâ”€â”€ OrderList.jsx
  â”‚   â”œâ”€â”€ OrderForm.jsx
  â”œâ”€â”€ services
  â”‚   â”œâ”€â”€ apiService.js
  â”‚   â”œâ”€â”€ OrderFactory.js
  â”œâ”€â”€ App.jsx
  â”œâ”€â”€ index.js


1) Singleton

singleton pattern is being used in frontend/src/services/apiService.js
It ensures ApiService has only one instance across the app.
Any component using apiService gets the same instance, preventing redundant API configurations.

2) Factory

Factory pattern is being used in frontend/src/services/OrderFactory.js
Instead of creating orders manually in different parts of the app ({ menuItem, price, status }), the OrderFactory.createOrder() method encapsulates order creation.
This ensures consistency and allows modifications (like adding timestamps) without changing every component that creates orders.

Summary:
âœ” Singleton (apiService.js) â†’ Ensures a single API handler instance.
âœ” Factory (OrderFactory.js) â†’ Standardizes object creation for orders.





-------------------BACKEND-----------------

Folder Structure

backend/
â”‚â”€â”€ node_modules/
â”‚â”€â”€ src/
â”‚   â”œâ”€â”€ controllers/
â”‚   â”‚   â”œâ”€â”€ orderController.js
â”‚   â”œâ”€â”€ models/
â”‚   â”‚   â”œâ”€â”€ orderModel.js
â”‚   â”œâ”€â”€ routes/
â”‚   â”‚   â”œâ”€â”€ orderRoutes.js
â”‚   â”œâ”€â”€ config/
â”‚   â”‚   â”œâ”€â”€ database.js
â”‚   â”œâ”€â”€ app.js
â”‚â”€â”€ server.js
â”‚â”€â”€ package.json


backend structure is following the MVC (Model-View-Controller) design pattern.

MVC is a structured pattern that separates concerns into three parts:
- Model (`models/orderModel.js`) â†’ Defines the database structure & logic.  
- Controller (`controllers/orderController.js`) â†’ Handles business logic & processes requests.  
- Routes (`routes/orderRoutes.js`) â†’ Maps API endpoints to the controller methods.  

How It Applies to Our Backend:
âœ” Model (`models/orderModel.js`)
   - Manages data and interacts with the database.  
   - Example: Defines the order schema and CRUD operations.

âœ” Controller (`controllers/orderController.js`) 
   - Handles business logic and calls the model.  
   - Example: Processes API requests, calls the model, and sends responses.

âœ” Routes (`routes/orderRoutes.js`)
   - Maps API endpoints to controller functions.  
   - Example: `POST /orders` routes to `orderController.createOrder()`.  

âœ” Config (`config/database.js`) 
   - Centralizes database connection logic, making it reusable.  

âœ” App (`app.js`) & Server (`server.js`)
   - `app.js` sets up the Express app.  
   - `server.js` starts the server.  

---

Summary:
âœ” MVC (Model-View-Controller) â†’ Separates concerns for better maintainability.  

Your backend correctly follows MVC, making it scalable and structured! ðŸš€